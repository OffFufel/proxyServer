
ZametkiNaPolyah.ru
HTTP протокол: основные правила Интернета, которые должен знать каждый веб-разработчик. Как браузер взаимодействует с сервером.

    Главная
    Видео
    Карта сайта
    От автора
    Помощь

Тема 5: HTTP ответы сервера: строка состояния HTTP ответа, коды состояния, заголовки HTTP ответа, примеры

    02.06.2016
    HTTP протокол, Сервера и протоколы	
    5 комментариев	

Привет, читатель блога ZametkiNaPolyah.ru! Продолжим знакомиться с протоколом HTTP в рубрике серверы и протоколы и ее разделе HTTP протокол. В этой записи мы с тобой разберем, как отвечает HTTP сервер на запросы клиента. Как всегда: понятно и с примерами, но если тебе что-то будет непонятно — не стесняйся спросить в комментариях. Ответ ты получишь, как минимум, HTTP. Как ты уже догадался, в этой записи мы с тобой будем говорить про HTTP ответы сервера, а конкретнее: про строку состояния HTTP ответа сервера, немного поговорим про коды состояния HTTP ответа, посмотрим какие заголовки сервер может посылать в ответ на запрос и разберем несколько примеров HTTP ответа сервера.

HTTP ответы сервера: строка состояния HTTP ответа, коды состояния, заголовки HTTP ответа, примеры

HTTP ответы сервера: строка состояния HTTP ответа, коды состояния, заголовки HTTP ответа, примеры

Структура HTTP ответа сервера

Содержание статьи:

    Структура HTTP ответа сервера
    Строка состояния HTTP ответа сервера
    Код состояния HTTP ответа и поясняющая фраза
    Поля заголовка HTTP ответа
    Пример HTTP ответа сервера

Если вы хотите узнать всё про протокол HTTP, обратитесь к навигации по рубрике HTTP протокол. HTTP ответы – это HTTP сообщение, которое посылает сервер в ответ на запрос клиента. Ответы HTTP сервера строго регламентированы и имеют четкую структуру. Структура HTTP ответа сервера состоит из:

    Строки состояния HTTP ответа, в которой сервер указывает версию HTTP протокола и код состояния.
    Нуля или нескольких полей HTTP заголовка, разделенных между собой символом CRLF.
    Пустой строки (в этой строке должен быть только символ CRLF), эта строка обозначает окончание полей заголовка.
    Необязательное тело HTTP сообщения.

Для тех кому непонятно словесное описание структуры HTTP ответа сервера приведем пример:

Response      = Status-Line               ;

*( general-header         ;

| response-header        ;

| entity-header )        ;

CRLF

[ message-body ]          ;
1
2
3
4
5
6
7
8
9
10
11
	
Response      = Status-Line               ;
 
*( general-header         ;
 
| response-header        ;
 
| entity-header )        ;
 
CRLF
 
[ message-body ]          ;

Мы обозначили структуру HTTP ответа сервера. Давайте теперь рассмотрим каждую из составляющих HTTP ответа сервера в отдельности.
Строка состояния HTTP ответа сервера

Первая строка в HTTP ответе – это строка состояния, иначе Status-Line. Она состоит из версии протокола HTTP, числового кода состояния HTTP сервера и поясняющей фразы. Окончание строки состояния в HTTP ответе является символ CRLF. Пример строки состояния HTTP ответа сервера:

 Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF 
1
	
 Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF 

Вот таким нехитрым образом записывается строка состояния в HTTP ответ. Да, кстати, строка состояния — это параметр HTTP.
Код состояния HTTP ответа и поясняющая фраза

О кодах состояния HTTP ответа я планирую написать несколько отдельных публикаций с пояснениями и дополнениями, а вот в этой записи мы ограничимся лишь кратким обзором кодов состояний HTTP ответа, иначе статья была бы не полной.

Вообще, правильно говорить элемент кода состояния или Status-Code – это целочисленный трехразрядный код результата понимания и удовлетворения запроса клиента. Грубо говоря, это число, которое показывает то, как сервер понял запрос клиента. К коду состояния HTTP ответа идет поясняющая фраз, которая предназначена для людей, чтобы те понимали, что в итоге случилось. Давайте сведем в таблицу коды состояний  HTTP сервера и дадим к ним пояснения:
Номер 	Код состояния HTTP сервера и его описание
1 	1xx: информационный код состояния HTTP сервера

Все коды состояний, начинающиеся с единицы говорят клиенту о том, что их запрос получен и находится в обработке  и называются они — информационные коды состояния.
2 	2xx: успешный код состояния HTTP сервера

Все коды состояний, начинающиеся с двойки говорят клиенту о том, что действие закончилось успешно: получено, понято и обработано, такие коды называются успешные HTTP коды.
3 	3xx: код перенаправления HTTP сервера

Все коды состояния, начинающиеся с тройки говорят клиенту о том, что для продолжения работы ему нужно совершить какие-то действия, это коды получили название кодов перенаправления HTTP сервера.
4 	4xx: коды ошибок HTTP клиента

Все коды состояния, начинающиеся с четверки говорят нам о том, что ошибка происходит по вине клиента (неверный синтаксис, устаревший протокол и прочее), из-за чего сервер не может корректно отработать и дать ответ. Их называют коды ошибок HTTP клиента.
5 	5xx: коды ошибок HTTP сервера

Все коды состояний, начинающиеся с пятерки, говорят нам о том, что произошла ошибка на стороне сервера HTTP. И они получили называние коды ошибок HTTP сервера.

 

Приведем набор кодов состояний в HTTP и поясняющие фразы к ним:

Status-Code    = "100"   ; Продолжать, Continue

| "101"   ; Переключение протоколов,

; Switching Protocols

| "200"   ; OK

| "201"   ; Создан, Created

| "202"   ; Принято, Accepted

| "203"   ; Не авторская информация,

; Non-Authoritative Information

| "204"   ; Нет содержимого, No Content

| "205"   ; Сбросить содержимое, Reset

; Content

| "206"   ; Частичное содержимое, Partial

; Content

| "300"   ; Множественный выбор, Multiple

; Choices

| "301"   ; Постоянно перенесен, Moved

; Permanently

| "302"   ; Временно перемещен, Moved

; Temporarily

| "303"   ; Смотреть другой, See Other

| "304"   ; Не модифицирован, Not Modified

| "305"   ; Используйте прокси-сервер, Use

; Proxy

| "400"   ; Испорченный Запрос, Bad Request

| "401"   ; Несанкционированно, Unauthorized

| "402"   ; Требуется оплата, Payment

; Required

| "403"   ; Запрещено, Forbidden

| "404"   ; Не найден, Not Found

| "405"   ; Метод не дозволен, Method Not

; Allowed

| "406"   ; Не приемлем, Not Acceptable

| "407"   ; Требуется установление

; подлинности через прокси-сервер,

; Proxy Authentication Required

| "408"   ; Истекло время ожидания запроса,

; Request Timeout

| "409"   ; Конфликт, Conflict

| "410"   ; Удален, Gone

| "411"   ; Требуется длина, Length Required

| "412"   ; Предусловие неверно,

; Precondition Failed

| "413"   ; Объект запроса слишком большой,

; Request Entity Too Large

| "414"   ; URI запроса слишком длинный,

; Request-URI Too Long

| "415"   ; Неподдерживаемый медиа тип,

; Unsupported Media Type

| "500"   ; Внутренняя ошибка сервера,

; Internal Server Error

| "501"   ; Не реализовано, Not Implemented

| "502"   ; Ошибка шлюза, Bad Gateway

| "503"   ; Сервис недоступен, Service

; Unavailable

| "504"   ; Истекло время ожидания от шлюза,

; Gateway Timeout

| "505"   ; Не поддерживаемая версия HTTP,

; HTTP Version Not Supported

| extension-code

 

extension-code = 3DIGIT

 

Reason-Phrase  = *<TEXT не включающий CR, LF>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
	
Status-Code    = "100"   ; Продолжать, Continue
 
| "101"   ; Переключение протоколов,
 
; Switching Protocols
 
| "200"   ; OK
 
| "201"   ; Создан, Created
 
| "202"   ; Принято, Accepted
 
| "203"   ; Не авторская информация,
 
; Non-Authoritative Information
 
| "204"   ; Нет содержимого, No Content
 
| "205"   ; Сбросить содержимое, Reset
 
; Content
 
| "206"   ; Частичное содержимое, Partial
 
; Content
 
| "300"   ; Множественный выбор, Multiple
 
; Choices
 
| "301"   ; Постоянно перенесен, Moved
 
; Permanently
 
| "302"   ; Временно перемещен, Moved
 
; Temporarily
 
| "303"   ; Смотреть другой, See Other
 
| "304"   ; Не модифицирован, Not Modified
 
| "305"   ; Используйте прокси-сервер, Use
 
; Proxy
 
| "400"   ; Испорченный Запрос, Bad Request
 
| "401"   ; Несанкционированно, Unauthorized
 
| "402"   ; Требуется оплата, Payment
 
; Required
 
| "403"   ; Запрещено, Forbidden
 
| "404"   ; Не найден, Not Found
 
| "405"   ; Метод не дозволен, Method Not
 
; Allowed
 
| "406"   ; Не приемлем, Not Acceptable
 
| "407"   ; Требуется установление
 
; подлинности через прокси-сервер,
 
; Proxy Authentication Required
 
| "408"   ; Истекло время ожидания запроса,
 
; Request Timeout
 
| "409"   ; Конфликт, Conflict
 
| "410"   ; Удален, Gone
 
| "411"   ; Требуется длина, Length Required
 
| "412"   ; Предусловие неверно,
 
; Precondition Failed
 
| "413"   ; Объект запроса слишком большой,
 
; Request Entity Too Large
 
| "414"   ; URI запроса слишком длинный,
 
; Request-URI Too Long
 
| "415"   ; Неподдерживаемый медиа тип,
 
; Unsupported Media Type
 
| "500"   ; Внутренняя ошибка сервера,
 
; Internal Server Error
 
| "501"   ; Не реализовано, Not Implemented
 
| "502"   ; Ошибка шлюза, Bad Gateway
 
| "503"   ; Сервис недоступен, Service
 
; Unavailable
 
| "504"   ; Истекло время ожидания от шлюза,
 
; Gateway Timeout
 
| "505"   ; Не поддерживаемая версия HTTP,
 
; HTTP Version Not Supported
 
| extension-code
 
 
 
extension-code = 3DIGIT
 
 
 
Reason-Phrase  = *<TEXT не включающий CR, LF>

Хочу обратить ваше внимание на то, что поясняющая фраза является рекомендацией стандарта HTTP и может быть заменена сервером на свою. Так же стоит заметить, что коды состояний HTTP ответа расширяемы и клиенту не обязательно понимать значения всех кодов состояний, однако каждый клиент должен понимать класс кода состояний, который обозначен первой цифрой.
Поля заголовка HTTP ответа

Поля заголовка HTTP ответа необходимы серверу для того, чтобы передать дополнительную информацию клиенту, которая не может быть помещена в строку состояния. Поля заголовка HTTP ответа помогают клиенту правильно обработать HTTP сообщение сервера. Так же поля заголовка HTTP ответа могут содержать дополнительную информацию о сервере и о дальнейшем доступе к ресурсу, указанному в URI (URI в HTTP):

response-header = Age                     ;

| Location                ;

| Proxy-Authenticate      ;

| Public                  ;

| Retry-After             ;

| Server                  ;

| Vary                    ;

| Warning                 ;

| WWW-Authenticate        ;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
	
response-header = Age                     ;
 
| Location                ;
 
| Proxy-Authenticate      ;
 
| Public                  ;
 
| Retry-After             ;
 
| Server                  ;
 
| Vary                    ;
 
| Warning                 ;
 
| WWW-Authenticate        ;

Если вы собрались написать свой HTTP сервер, то без проблем сможете расширить поля заголовка HTTP ответов, это не рекомендуется стандартом, но все же делается и, в принципе, клиенты понимают такое расширение и корректно его отрабатывают. Тут главное соблюдать HTTP требования.
Пример HTTP ответа сервера

Давайте теперь посмотрим пример HTTP ответа сервера, помните, мы запрашивали у сервера HTML документ в записи про HTTP запросы? Давайте теперь посмотрим, какой ответ нам даст HTTP сервер:

HTTP/1.1 200 OK

Date: Mon, 27 Jul 2009 12:28:53 GMT

Server: Apache/2.2.14 (Win32)

Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT

Content-Length: 88

Content-Type: text/html

Connection: Closed

<html>

<body>

<h1>Hello, World!</h1>

</body>

</html>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
	
HTTP/1.1 200 OK
 
Date: Mon, 27 Jul 2009 12:28:53 GMT
 
Server: Apache/2.2.14 (Win32)
 
Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
 
Content-Length: 88
 
Content-Type: text/html
 
Connection: Closed
 
<html>
 
<body>
 
<h1>Hello, World!</h1>
 
</body>
 
</html>

А теперь давайте посмотрим, какой ответ нам даст HTTP сервер, если произойдет ошибка и сервер не сможет найти требуемую нам страницу:

HTTP/1.1 404 Not Found

Date: Sun, 18 Oct 2012 10:36:20 GMT

Server: Apache/2.2.14 (Win32)

Content-Length: 230

Connection: Closed

Content-Type: text/html; charset=iso-8859-1

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">

<html>

<head>

<title>404 Not Found</title>

</head>

<body>

<h1>Not Found</h1>

<p>The requested URL /t.html was not found on this server.</p>

</body>

</html>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
	
HTTP/1.1 404 Not Found
 
Date: Sun, 18 Oct 2012 10:36:20 GMT
 
Server: Apache/2.2.14 (Win32)
 
Content-Length: 230
 
Connection: Closed
 
Content-Type: text/html; charset=iso-8859-1
 
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
 
<html>
 
<head>
 
<title>404 Not Found</title>
 
</head>
 
<body>
 
<h1>Not Found</h1>
 
<p>The requested URL /t.html was not found on this server.</p>
 
</body>
 
</html>

И третий пример покажет нам, что ответит HTTP сервер, если обнаружит, что клиент пользуется другой версией HTTP протокола:

HTTP/1.1 400 Bad Request

Date: Sun, 18 Oct 2012 10:36:20 GMT

Server: Apache/2.2.14 (Win32)

Content-Length: 230

Content-Type: text/html; charset=iso-8859-1

Connection: Closed

 

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">

<html>

<head>

<title>400 Bad Request</title>

</head>

<body>

<h1>Bad Request</h1>

<p>Your browser sent a request that this server could not understand.</p>

<p>The request line contained invalid characters following the protocol string.</p>

</body>

</html>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
	
HTTP/1.1 400 Bad Request
 
Date: Sun, 18 Oct 2012 10:36:20 GMT
 
Server: Apache/2.2.14 (Win32)
 
Content-Length: 230
 
Content-Type: text/html; charset=iso-8859-1
 
Connection: Closed
 
 
 
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
 
<html>
 
<head>
 
<title>400 Bad Request</title>
 
</head>
 
<body>
 
<h1>Bad Request</h1>
 
<p>Your browser sent a request that this server could not understand.</p>
 
<p>The request line contained invalid characters following the protocol string.</p>
 
</body>
 
</html>

Вот так легко и просто мы разобрались с HTTP ответами сервера.
Еще записи о создании сайтов и их продвижении, базах данных, IT-технология и сетевых протоколах

    HTTP коды ошибок сервера: 500, 501, 502, 503, 504, 505
    Тема 9: HTTP коды состояния. Классы кодов состояния HTTP сервера
    Тема 4: HTTP запрос: заголовки HTTP запроса, методы HTTP запроса, строка HTTP запроса, ресурсы HTTP запроса, примеры запросов
    Успешные коды состояния HTTP сервера: 200, 201, 202, 203, 204, 205, 206
    Тема 3: HTTP сообщение: типы HTTP сообщений, заголовки HTTP сообщений, тело сообщения и примеры HTTP сообщений
    Список кодов состояния HTTP сервера. Справочник кодов состояния HTTP сервера
    HTTP коды состояния перенаправления: 300, 301, 302, 303, 304, 305, 306, 307
    Тема 10: Справочник полей HTTP заголовков. Список полей HTTP заголовка. Заголовки HTTP сообщений: запросов и ответов

Возможно, эти записи вам покажутся интересными

Related Posts
HTTP коды ошибок клиента
Привет, читатель блога ZametkiNaPolyah.ru! Продолжим знакомиться с протоколом HTTP в рубрике Серверы и протоколы и ее разделе…
HTTP метки или HTTP тэги
Здравствуйте, уважаемые посетители сайта ZametkiNaPolyah.ru. Продолжим знакомиться с протоколом HTTP в рубрике серверы и протоколы…
Кодирование в HTTP. Кодовые таблицы в HTTP
Здравствуйте, уважаемые посетители сайта ZametkiNaPolyah.ru. Продолжим знакомиться с протоколом HTTP в рубрике серверы и протоколы…
Выберете удобный для себя способ, чтобы оставить комментарий

    Прямо в блог
    Disqus

This article has 5 comments

    webLamer
    02.06.2016	Reply	

    Спасибо за полное разъяснения кодов состояний ответ сервера и за полный список кодов в HTTP ответах, этой страничкой, как справочником пользоваться буду: очень удобно, когда всё в одном месте!
    Колясик
    02.06.2016	Reply	

    Вы писали про символ CRLF, что это такое, я понимаю, что вопрос не про HTTP ответы, так всё понятно, кроме этого преславутого CRLF.
        Кирилл
        03.06.2016	Reply	

        Символ CRLF — свдивунть каретку перетянуть бумагу, что-то вроде этого, этот символ идет со времен мейнфреймов и означает перевод на новую строку. В сообщениях HTTP, не важно, запрос то или ответ, данный символ означает окончание строки. Если строка содержит только символ CRLF, то это означает окончание блока.
    Котейка
    02.06.2016	Reply	

    Кирилл, спасибо, как всегда — отлично, ясно и доступно! ?? Только вот не понятно какие значения могут быть в полях заголовка? Все ваши публикации пересмотрела и про сообщения и про ответа, и даже про запросы, дошла до самых первых статей в рубрике HTTP, но ответа не нашла ??
        Кирилл
        03.06.2016	Reply	

        Про поля заголовков в HTTP сообщениях будет отдельная публикация, надеюсь, что скоро!

Leave a Comment

Ваш e-mail не будет опубликован. Обязательные поля помечены *

Оповещать о новых комментариях к записи по почте

Имя *

E-mail *

Сайт

Сохранить моё имя, email и адрес сайта в этом браузере для последующих моих комментариев.

Код безопасности *
code
Введите символы отображаемые выше:

	
Подписка на обновления

Чтобы получать обновления блога на почту, введите свой E-Mail в форму ниже:

Навигация по блогу

    HTML справочник (21)
        HTML теги (21)
    Базы данных (98)
        SQLite библиотека (87)
        Сервер MySQL (4)
    Веб-программирование (23)
        PHP (4)
        Серверное программирование (2)
        Уроки JavaScript для начинающих (17)
    Верстка сайтов (38)
        CSS (8)
        HTML (17)
        LESS (8)
        SASS и SCSS (7)
    Видео блог (20)
        HTML (1)
        JavaScript (1)
        SQL, БД, SQLite (4)
        Создание шаблонов: HTML и CSS (14)
        СУБД SQLite (3)
    Вопрос-ответ (18)
        Как сделать? (7)
        Что такое? (12)
    Изучаем систему Linux (8)
        Linux Mint (8)
    Как сделать сайт бесплатно (17)
        Делаем сайты на Drupal 7 (7)
        Как создать сайт на Joomla 1.5 (6)
        Модули Drupal 7 (1)
        Темы WordPress (2)
    Как создавать HTML шаблоны сайтов (6)
        XML и XLST (3)
        Уроки CSS (3)
    Как создать блог бесплатно (4)
        Как создать блог на WordPress (4)
        Плагины WordPress (1)
    Компьютерные сети (45)
        Cisco CCNA (ICND1 и ICND2) (38)
        Протоколы динамической маршрутизации (2)
    Поиск и продвижение (15)
        Внутренняя оптимизация сайта (7)
        Как раскрутить сайт бесплатно (9)
        ТИЦ и PR (2)
    Полезные программы (31)
        RSS reader или RSS агрегатор (2)
        SEO программы (1)
        Бесплатные почтовые клиенты (1)
        Инструменты разработчика и редакторы (13)
        Команды и утилиты Windows (7)
        Сетевые утилиты и программы (5)
    Реальный заработок в интернете (13)
        Биржа ссылок (1)
        Способы заработка в интернете (2)
        Электронные платежные системы (9)
    Сервера и протоколы (44)
        HTTP протокол (35)
        Веб-сервер Apache (2)
    Сервисы Google (2)
    Сервисы и онлайн инструменты (13)
        E-mail и почтовые сервисы (2)
        RSS лента. RSS feed (4)
        Инструменты вебмастера (2)
        Посещаемость сайта (1)
        Хостинг и домен (2)

Самые последние записи

    Чем VPS отличается от VDS? VPS/VDS или виртуальный хостинг, что выбрать?
    9.4 Время аренды IP-адреса в DHCP или lease time. Как происходит перезапрос и освобождение IP-адреса?
    9.3 Структура, формат и назначение DHCP пакетов (сообщений): DHCPDISCOVER, DHCPOFFER, DHCPREQUEST и DHCPACK
    9.2 Процесс получения IP-адреса по DHCP. DHCP-клиент и DHCP-сервер
    9.1 Зачем нужен протокол DHCP? Что такое DHCP опции (DHCP options) и зачем они нужны?
    Часть 9. Динамическая конфигурация узлов и протокол DHCP (Dynamic Host Configuration Protocol)
    2. Соседи в OSPF и установка отношений соседства (OSPF adjacency). Выборы DR и BDR роутеров в канальной среде на примере оборудования Cisco
    1. Основы IGP протокола OSPF класса Link-State или базовая настройка динамической маршрутизации на роутере Cisco
    4.10 Как получить IP-адрес. Статические и динамические IP-адреса. Ключевые особенности настройки DHCP-сервера
    4.9 Виды устройств в IP-сетях: конечные узлы, маршрутизаторы и их функции. Сколько IP-адресов может быть у компьютера

Самые последние комментарии

    Klen к записи 1.5 Установка Cisco Packet Tracer 7.1 на дистрибутив Linux Ubuntu 16.04
    гена к записи 4.3 IP-пакет в протоколе IPv4. Структура, заголовок и поля в IP-пакете
    Наталья к записи 4.4 Двоичные числа и двоичная система счисления. Перевод числа в двоичную систему счисления из десятичной
    Владислав к записи Базы данных. Виды и типы баз данных. Структура реляционных баз данных. Проектирование баз данных. Сетевые и иерархические базы данных
    Nexus к записи 4.3 IP-пакет в протоколе IPv4. Структура, заголовок и поля в IP-пакете
    Mark к записи 1.5 Установка Cisco Packet Tracer 7.1 на дистрибутив Linux Ubuntu 16.04
    Sam258 к записи 4.2 IP-адрес в протоколе IPv4. Структура IP-адреса: как узнать номер сети и номер узла?
    Михаил к записи Где скачать и как установить PHP? Инструкция по установке PHP 5.6 на Windows без использования Apache на встроенный в PHP сервер
    Собир к записи Что такое HTTP сервер Apache? Установка веб-сервера Apache 2.4 на Windows. Где скачать Apache 2.4 для Windows?
    RedinZP к записи Электронный кошелек деньги@mail.ru. Обзор платежной системы как положить на счет и как вывести деньги с деньги@mail.ru

    Тема 6: HTTP объекты. HTTP entity
    Тема 4: HTTP запрос: заголовки HTTP запроса, методы HTTP запроса, строка HTTP запроса, ресурсы HTTP запроса, примеры запросов

Самые комментируемые записи

    Электронная почта Gmail вход и регистрация. Почта Google. Как создать аккаунт Google 19 comments
    Накрутка RSS счетчика Feedburner и другие неудачные способы раскрутки сайта 15 comments
    Пользователи MySQL. Как создать пользователя MySQL 13 comments
    1.20 Разница между хабами, коммутаторами и роутерами (маршрутизаторами) 13 comments
    Базы данных. Виды и типы баз данных. Структура реляционных баз данных. Проектирование баз данных. Сетевые и иерархические базы данных 12 comments
    Структура шаблона WordPress. Файлы WordPress шаблона 12 comments
    Бесплатный редактор с подсветкой синтаксиса Notepad++. Где скачать Notepad++. Начало работы с HTML и PHP редактором Notepad++ 10 comments
    Как создать WebMoney кошелек. Вебмани вход в систему. Управление WebMoney Keeper Mini 10 comments
    Как работает Drupal. Содержимое Drupal. Часть 2 10 comments
    Что нужно знать про HTTP протокол веб-разработчику. Правила HTTP протокола 10 comments

Самое читаемое за все время

    Базы данных. Виды и типы баз данных. Структура реляционных баз данных. Проектирование баз данных. Сетевые и иерархические базы данных 85 views
    1.19 Как объединить две подсети в сеть или зачем нужны маршрутизаторы и основной шлюз? Пример настройки домашнего роутера 48 views
    О модели взаимодействия клиент-сервер простыми словами. Архитектура «клиент-сервер» с примерами 41 views
    Часть 3.2: Виды связей между таблицами в базе данных. Связи в реляционных базах данных. Отношения, кортежи, атрибуты 35 views
    Тема 4: HTTP запрос: заголовки HTTP запроса, методы HTTP запроса, строка HTTP запроса, ресурсы HTTP запроса, примеры запросов 35 views
    1.20 Разница между хабами, коммутаторами и роутерами (маршрутизаторами) 31 views
    Пробельные символы в HTML: табуляция в HTML, неразрывный пробел в HTML, перенос строки в HTML 30 views
    1.21 Виды и типы компьютерных сетей (сетей передачи данных) и их радиус действия. Что такое BAN, PAN, LAN, CAN, MAN, WAN? 27 views
    Тема 13: Триггеры в SQL на примере базы данных SQLite 25 views
    Часть 12.14: Объединение таблиц в SQL и базах данных SQLite: JOIN и SELECT 21 views

Самое популярное за сегодня

    Базы данных. Виды и типы баз данных. Структура реляционных баз данных. Проектирование баз данных. Сетевые и иерархические базы данных 0,17 views per day
    1.19 Как объединить две подсети в сеть или зачем нужны маршрутизаторы и основной шлюз? Пример настройки домашнего роутера 0,10 views per day
    О модели взаимодействия клиент-сервер простыми словами. Архитектура «клиент-сервер» с примерами 0,08 views per day
    Часть 3.2: Виды связей между таблицами в базе данных. Связи в реляционных базах данных. Отношения, кортежи, атрибуты 0,07 views per day
    Тема 4: HTTP запрос: заголовки HTTP запроса, методы HTTP запроса, строка HTTP запроса, ресурсы HTTP запроса, примеры запросов 0,07 views per day
    1.20 Разница между хабами, коммутаторами и роутерами (маршрутизаторами) 0,06 views per day
    Пробельные символы в HTML: табуляция в HTML, неразрывный пробел в HTML, перенос строки в HTML 0,06 views per day
    1.21 Виды и типы компьютерных сетей (сетей передачи данных) и их радиус действия. Что такое BAN, PAN, LAN, CAN, MAN, WAN? 0,05 views per day
    Тема 13: Триггеры в SQL на примере базы данных SQLite 0,05 views per day
    Часть 12.14: Объединение таблиц в SQL и базах данных SQLite: JOIN и SELECT 0,04 views per day

ZametkiNaPolyah.ru	
